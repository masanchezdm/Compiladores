/* The following code was generated by JFlex 1.4.3 on 14/09/18 05:41 PM */

/********************************************************************************
**  @author Diana Montes                                                       **
**  @about Proyecto 1: Analizador l√©xico para p, subconjunto de Python.        **
*********************************************************************************/
package lexico;
import java.util.*;
import java.io.FileWriter;
import java.io.BufferedWriter;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/09/18 05:41 PM from the specification file
 * <tt>/home/adrisan/Documentos/Compiladores/Compiladores/Proyectos/Proyecto_1/src/main/jflex/Atomos.jflex</tt>
 */
public class Alexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int I = 2;
  public static final int YYINITIAL = 0;
  public static final int INDENTACION = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\1\0\1\0\1\1\22\0\1\50\1\41\1\46"+
    "\1\47\1\0\1\44\4\0\1\43\1\41\1\0\1\41\1\6\1\42"+
    "\1\5\11\4\1\40\1\0\1\41\1\45\1\41\2\0\15\36\1\35"+
    "\3\36\1\3\10\36\4\0\1\37\1\0\1\20\1\23\1\25\1\21"+
    "\1\13\1\30\1\34\1\10\1\11\1\36\1\24\1\12\1\33\1\16"+
    "\1\26\1\14\1\36\1\15\1\22\1\17\1\27\1\36\1\7\1\31"+
    "\1\32\1\36\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\2\3\1\1\22\4\1\5\4\6"+
    "\1\1\1\7\1\10\1\11\2\12\2\4\1\13\13\4"+
    "\1\13\11\4\1\0\1\14\41\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\122\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\244\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d"+
    "\0\u0386\0\u03af\0\u03d8\0\122\0\u0401\0\u042a\0\u0453\0\122"+
    "\0\u047c\0\u04a5\0\122\0\122\0\u04ce\0\122\0\u04f7\0\u0520"+
    "\0\244\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f"+
    "\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u047c\0\122"+
    "\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5"+
    "\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d"+
    "\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55"+
    "\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d"+
    "\0\u0dc6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\13\1\25\1\13\1\26\1\27\1\13"+
    "\1\30\1\13\1\31\1\13\1\32\1\33\1\13\1\3"+
    "\1\34\1\35\1\36\1\37\2\40\1\41\1\42\1\3"+
    "\2\43\1\3\45\43\1\44\53\0\1\5\51\0\3\13"+
    "\1\0\31\13\15\0\2\7\1\45\47\0\1\10\1\45"+
    "\46\0\2\46\46\0\3\13\1\0\1\13\1\47\1\50"+
    "\26\13\14\0\3\13\1\0\7\13\1\51\3\13\1\51"+
    "\5\13\1\51\2\13\1\52\4\13\14\0\3\13\1\0"+
    "\11\13\1\53\17\13\14\0\3\13\1\0\3\13\1\54"+
    "\16\13\1\55\6\13\14\0\3\13\1\0\6\13\1\56"+
    "\2\13\1\57\17\13\14\0\3\13\1\0\4\13\1\60"+
    "\4\13\1\61\17\13\14\0\3\13\1\0\17\13\1\62"+
    "\11\13\14\0\3\13\1\0\6\13\1\63\22\13\14\0"+
    "\3\13\1\0\7\13\1\64\3\13\1\65\15\13\14\0"+
    "\3\13\1\0\4\13\1\66\24\13\14\0\3\13\1\0"+
    "\6\13\1\67\22\13\14\0\3\13\1\0\3\13\1\70"+
    "\13\13\1\71\11\13\14\0\3\13\1\0\6\13\1\51"+
    "\22\13\14\0\3\13\1\0\2\13\1\72\3\13\1\73"+
    "\10\13\1\27\11\13\14\0\3\13\1\0\2\13\1\74"+
    "\26\13\14\0\3\13\1\0\3\13\1\75\25\13\14\0"+
    "\3\13\1\0\17\13\1\76\11\13\56\0\1\40\45\0"+
    "\1\40\51\0\1\40\5\0\46\77\1\100\2\77\2\42"+
    "\1\0\46\42\4\0\2\45\46\0\3\13\1\0\2\13"+
    "\1\101\26\13\14\0\3\13\1\0\10\13\1\102\20\13"+
    "\14\0\3\13\1\0\5\13\1\103\23\13\14\0\3\13"+
    "\1\0\24\13\1\104\4\13\14\0\3\13\1\0\2\13"+
    "\1\105\10\13\1\106\15\13\14\0\3\13\1\0\4\13"+
    "\1\107\11\13\1\110\12\13\14\0\3\13\1\0\2\13"+
    "\1\111\26\13\14\0\3\13\1\0\13\13\1\112\15\13"+
    "\14\0\3\13\1\0\10\13\1\113\20\13\14\0\3\13"+
    "\1\0\2\13\1\114\26\13\14\0\3\13\1\0\10\13"+
    "\1\51\20\13\14\0\3\13\1\0\23\13\1\51\5\13"+
    "\14\0\3\13\1\0\12\13\1\51\16\13\14\0\3\13"+
    "\1\0\13\13\1\115\15\13\14\0\3\13\1\0\3\13"+
    "\1\51\15\13\1\51\7\13\14\0\3\13\1\0\4\13"+
    "\1\116\24\13\14\0\3\13\1\0\11\13\1\57\17\13"+
    "\14\0\3\13\1\0\7\13\1\117\21\13\14\0\3\13"+
    "\1\0\7\13\1\120\21\13\14\0\3\13\1\0\17\13"+
    "\1\121\11\13\14\0\3\13\1\0\4\13\1\122\24\13"+
    "\14\0\3\13\1\0\17\13\1\123\11\13\14\0\3\13"+
    "\1\0\7\13\1\106\21\13\14\0\3\13\1\0\3\13"+
    "\1\106\25\13\14\0\3\13\1\0\1\13\1\51\27\13"+
    "\14\0\3\13\1\0\17\13\1\124\11\13\14\0\3\13"+
    "\1\0\14\13\1\125\14\13\14\0\3\13\1\0\21\13"+
    "\1\51\7\13\14\0\3\13\1\0\4\13\1\51\24\13"+
    "\14\0\3\13\1\0\16\13\1\51\12\13\14\0\3\13"+
    "\1\0\4\13\1\126\24\13\14\0\3\13\1\0\7\13"+
    "\1\62\21\13\14\0\3\13\1\0\13\13\1\51\15\13"+
    "\14\0\3\13\1\0\20\13\1\127\10\13\14\0\3\13"+
    "\1\0\13\13\1\106\15\13\14\0\3\13\1\0\4\13"+
    "\1\124\24\13\14\0\3\13\1\0\11\13\1\130\17\13"+
    "\14\0\3\13\1\0\10\13\1\131\20\13\14\0\3\13"+
    "\1\0\11\13\1\132\17\13\14\0\3\13\1\0\24\13"+
    "\1\51\4\13\14\0\3\13\1\0\3\13\1\64\25\13"+
    "\14\0\3\13\1\0\14\13\1\133\14\13\14\0\3\13"+
    "\1\0\6\13\1\62\22\13\14\0\3\13\1\0\12\13"+
    "\1\134\16\13\14\0\3\13\1\0\5\13\1\62\23\13"+
    "\14\0\3\13\1\0\6\13\1\135\22\13\14\0\3\13"+
    "\1\0\15\13\1\51\13\13\14\0\3\13\1\0\2\13"+
    "\1\136\26\13\14\0\3\13\1\0\3\13\1\137\25\13"+
    "\14\0\3\13\1\0\11\13\1\140\17\13\14\0\3\13"+
    "\1\0\11\13\1\51\17\13\14\0\3\13\1\0\7\13"+
    "\1\51\21\13\14\0\3\13\1\0\7\13\1\141\21\13"+
    "\14\0\3\13\1\0\3\13\1\63\25\13\14\0\3\13"+
    "\1\0\3\13\1\51\25\13\14\0\3\13\1\0\20\13"+
    "\1\106\10\13\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3567];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\26\1\1\11\3\1\1\11"+
    "\2\1\2\11\1\1\1\11\30\1\1\0\1\11\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

            //codigo dentro de la clase
    private static Stack<Integer> pila = new Stack<Integer>();
    private int counter = 0, linea = 1;
    private String resultado = "";
    public  void indenta(boolean continuar_indent){
        if(continuar_indent){
            counter++;
            return;
        }else{
            if(counter > 0 && pila.empty()){
                pila.push(counter);            
                analisis("INDENTA(" + counter+ ")" );
            }else if(counter > 0 && !pila.empty() && counter > pila.peek()){
                pila.push(counter);   
                analisis("INDENTA(" + counter+ ")");
            }else if(counter > 0 && !pila.empty() && counter < pila.peek()){
                analisis("Error de indentacion, linea " + linea);
                System.out.print(resultado);
                archivo();
                System.exit(0);
            }else if(counter == 0){
                while(!pila.empty()){
                    analisis("DENDENTA(" + pila.pop() + ") \n");
                }
                return;
            }
            counter = 0;  
            
        }
        return;
    }
    
    public void analisis(String exp){
        resultado+=exp;
    }
    
    public void archivo(){
        try{
            FileWriter fw1 = new FileWriter("salida/Proyecto1.plx");
            BufferedWriter bw1 = new BufferedWriter(fw1);
            bw1.write(resultado);
            bw1.close();
        }catch(Exception ex){}
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Alexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Alexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    analisis("SALTO\n");
while(!pila.isEmpty()){
    analisis("DEINDENTA("+pila.pop()+")\n");
}

System.out.print(resultado);
archivo();


    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { indenta(false); yypushback(1); yybegin(YYINITIAL);
          }
        case 13: break;
        case 6: 
          { analisis("OPERADOR(" + yytext()+ ")");
          }
        case 14: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 15: break;
        case 4: 
          { analisis("IDENTIFICADOR(" + yytext()+ ")");
          }
        case 16: break;
        case 9: 
          { indenta(true);
          }
        case 17: break;
        case 10: 
          { analisis("REAL(" + yytext()+ ")");
          }
        case 18: break;
        case 5: 
          { analisis("SEPARADOR(" + yytext()+ ")");
          }
        case 19: break;
        case 2: 
          { linea+=1; analisis("SALTO\n"); yybegin(INDENTACION);
          }
        case 20: break;
        case 3: 
          { analisis("ENTERO(" + yytext()+ ")");
          }
        case 21: break;
        case 7: 
          { analisis("COMENTARIO(" + yytext()+ ")");
          }
        case 22: break;
        case 11: 
          { analisis("Reservado(" + yytext()+ ")");
          }
        case 23: break;
        case 12: 
          { analisis("CADENA(" + yytext()+ ")");
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Alexico <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Alexico scanner = null;
        try {
          scanner = new Alexico( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
