/* The following code was generated by JFlex 1.4.3 on 9/09/18 04:05 PM */

/********************************************************************************
**  @author Diana Montes                                                       **
**  @about Proyecto 1: Analizador l√©xico para p, subconjunto de Python.        **
*********************************************************************************/
package lexico;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/09/18 04:05 PM from the specification file
 * <tt>/home/adrisan/Documentos/2018-2/Proyecto1/codigo/src/main/jflex/Atomos.jflex</tt>
 */
public class Alexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTACION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\1\0\1\0\1\1\22\0\1\46\1\42\1\0"+
    "\1\45\1\0\1\40\4\0\1\43\1\40\1\0\1\40\1\5\1\41"+
    "\1\4\11\3\1\37\1\0\1\42\1\44\1\42\2\0\15\35\1\34"+
    "\14\35\4\0\1\36\1\0\1\13\1\17\1\21\1\14\1\16\1\25"+
    "\1\31\1\33\1\10\1\35\1\20\1\22\1\30\1\11\1\23\1\6"+
    "\1\35\1\7\1\15\1\12\1\24\1\35\1\32\1\26\1\27\1\35"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\2\2\1\3\2\4\1\2\22\5\1\6"+
    "\4\7\1\10\1\11\1\12\1\0\1\13\2\14\1\15"+
    "\4\5\1\16\4\5\1\16\57\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\116\0\116\0\u03f6\0\u041d\0\u0444\0\u046b"+
    "\0\116\0\116\0\234\0\116\0\u0492\0\116\0\116\0\u04b9"+
    "\0\u04e0\0\u0507\0\u052e\0\u0249\0\u0555\0\u057c\0\u05a3\0\u05ca"+
    "\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702"+
    "\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a"+
    "\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972"+
    "\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa"+
    "\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2"+
    "\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\20\1\23\1\24\1\25\1\20\1\26\1\20\1\27"+
    "\1\20\1\30\1\31\1\20\1\32\1\20\1\3\1\33"+
    "\1\34\1\35\1\36\1\37\1\34\1\40\1\3\2\41"+
    "\1\3\43\41\1\42\51\0\1\43\41\0\1\44\46\0"+
    "\1\44\5\0\2\6\1\45\45\0\1\7\1\45\44\0"+
    "\2\46\37\0\1\47\5\0\2\20\1\0\1\20\1\50"+
    "\3\20\1\51\23\20\13\0\2\20\1\0\5\20\1\52"+
    "\2\20\1\53\20\20\13\0\2\20\1\0\3\20\1\54"+
    "\3\20\1\54\7\20\1\54\2\20\1\55\6\20\13\0"+
    "\2\20\1\0\15\20\1\56\13\20\13\0\2\20\1\0"+
    "\1\20\1\57\27\20\13\0\2\20\1\0\3\20\1\60"+
    "\3\20\1\61\21\20\13\0\2\20\1\0\10\20\1\62"+
    "\20\20\13\0\2\20\1\0\31\20\13\0\2\20\1\0"+
    "\14\20\1\63\3\20\1\64\10\20\13\0\2\20\1\0"+
    "\1\20\1\65\27\20\13\0\2\20\1\0\14\20\1\66"+
    "\1\67\13\20\13\0\2\20\1\0\5\20\1\70\23\20"+
    "\13\0\2\20\1\0\1\20\1\54\27\20\13\0\2\20"+
    "\1\0\1\20\1\71\1\72\12\20\1\25\13\20\13\0"+
    "\2\20\1\0\2\20\1\73\26\20\13\0\2\20\1\0"+
    "\14\20\1\74\14\20\13\0\2\20\1\0\2\20\1\75"+
    "\22\20\1\76\3\20\13\0\2\20\1\0\15\20\1\77"+
    "\13\20\51\0\1\34\51\0\1\34\45\0\1\34\3\0"+
    "\2\40\1\0\44\40\3\0\2\45\45\0\2\20\1\0"+
    "\2\20\1\100\26\20\13\0\2\20\1\0\7\20\1\101"+
    "\21\20\13\0\2\20\1\0\2\20\1\102\26\20\13\0"+
    "\2\20\1\0\4\20\1\103\24\20\13\0\2\20\1\0"+
    "\1\104\30\20\13\0\2\20\1\0\4\20\1\54\24\20"+
    "\13\0\2\20\1\0\21\20\1\54\7\20\13\0\2\20"+
    "\1\0\6\20\1\54\22\20\13\0\2\20\1\0\7\20"+
    "\1\105\21\20\13\0\2\20\1\0\14\20\1\54\2\20"+
    "\1\54\11\20\13\0\2\20\1\0\2\20\1\106\4\20"+
    "\1\107\21\20\13\0\2\20\1\0\10\20\1\110\2\20"+
    "\1\111\15\20\13\0\2\20\1\0\10\20\1\112\20\20"+
    "\13\0\2\20\1\0\5\20\1\51\23\20\13\0\2\20"+
    "\1\0\3\20\1\113\25\20\13\0\2\20\1\0\22\20"+
    "\1\114\6\20\13\0\2\20\1\0\15\20\1\115\13\20"+
    "\13\0\2\20\1\0\3\20\1\116\25\20\13\0\2\20"+
    "\1\0\10\20\1\117\20\20\13\0\2\20\1\0\15\20"+
    "\1\120\13\20\13\0\2\20\1\0\4\20\1\121\24\20"+
    "\13\0\2\20\1\0\2\20\1\122\26\20\13\0\2\20"+
    "\1\0\3\20\1\107\25\20\13\0\2\20\1\0\3\20"+
    "\1\56\25\20\13\0\2\20\1\0\7\20\1\54\21\20"+
    "\13\0\2\20\1\0\7\20\1\107\21\20\13\0\2\20"+
    "\1\0\16\20\1\123\12\20\13\0\2\20\1\0\15\20"+
    "\1\124\13\20\13\0\2\20\1\0\10\20\1\124\20\20"+
    "\13\0\2\20\1\0\17\20\1\54\11\20\13\0\2\20"+
    "\1\0\10\20\1\54\20\20\13\0\2\20\1\0\13\20"+
    "\1\54\15\20\13\0\2\20\1\0\10\20\1\125\20\20"+
    "\13\0\2\20\1\0\5\20\1\126\23\20\13\0\2\20"+
    "\1\0\4\20\1\127\24\20\13\0\2\20\1\0\11\20"+
    "\1\130\17\20\13\0\2\20\1\0\22\20\1\54\6\20"+
    "\13\0\2\20\1\0\5\20\1\131\23\20\13\0\2\20"+
    "\1\0\14\20\1\60\14\20\13\0\2\20\1\0\11\20"+
    "\1\132\17\20\13\0\2\20\1\0\25\20\1\54\3\20"+
    "\13\0\2\20\1\0\14\20\1\107\14\20\13\0\2\20"+
    "\1\0\1\20\1\133\27\20\13\0\2\20\1\0\1\20"+
    "\1\56\27\20\13\0\2\20\1\0\1\56\30\20\13\0"+
    "\2\20\1\0\12\20\1\54\16\20\13\0\2\20\1\0"+
    "\2\20\1\134\26\20\13\0\2\20\1\0\6\20\1\135"+
    "\22\20\13\0\2\20\1\0\14\20\1\136\14\20\13\0"+
    "\2\20\1\0\5\20\1\137\23\20\13\0\2\20\1\0"+
    "\3\20\1\54\25\20\13\0\2\20\1\0\3\20\1\140"+
    "\25\20\13\0\2\20\1\0\5\20\1\54\23\20\13\0"+
    "\2\20\1\0\14\20\1\57\14\20\13\0\2\20\1\0"+
    "\14\20\1\54\14\20\13\0\2\20\1\0\16\20\1\107"+
    "\12\20\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3393];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\27\1\2\11\4\1\2\11\1\0"+
    "\1\11\1\1\2\11\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

            //codigo dentro de la clase
    private static Stack<Integer> pila = new Stack<Integer>();
    private static int counter = 0;
    public static void identa(boolean continuar_indent){
        if(continuar_indent)
            counter++;
        else{
            if(counter > 0 && pila.empty()){
                pila.push(counter);            
                System.out.print("INDENTA(" + counter+ ")" );
            }
            if(counter > 0 && !pila.empty() && counter > pila.peek()){
                pila.push(counter);   
                System.out.print("INDENTA(" + counter+ ")");
            }else if(counter > 0 && !pila.empty() && counter < pila.peek()){
                System.out.print("error");
                return;
            }
            else if(counter == 0){
                while(!pila.empty()){
                    System.out.println("DENDENTA " + pila.pop() + " ");
                }
                return;
            }
            counter = 0;  
            
        }
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Alexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Alexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { System.out.print("OPERADOR ");
          }
        case 15: break;
        case 3: 
          { System.out.println("SALTO "); yybegin(INDENTACION);
          }
        case 16: break;
        case 14: 
          { System.out.print("Reservado ");
          }
        case 17: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 18: break;
        case 11: 
          { System.out.print("SALTO ") ;
          }
        case 19: break;
        case 4: 
          { System.out.print("ENTERO ");
          }
        case 20: break;
        case 5: 
          { System.out.print("IDENTIFICADOR ");
          }
        case 21: break;
        case 8: 
          { System.out.print("COMENTARIO ");
          }
        case 22: break;
        case 12: 
          { System.out.print("REAL ");
          }
        case 23: break;
        case 10: 
          { identa(true);
          }
        case 24: break;
        case 6: 
          { System.out.print("SEPARADOR ");
          }
        case 25: break;
        case 9: 
          { identa(false); yybegin(YYINITIAL);
          }
        case 26: break;
        case 13: 
          { System.out.print("CADENA ");
          }
        case 27: break;
        case 1: 
          { yybegin(INDENTACION);
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Alexico <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Alexico scanner = null;
        try {
          scanner = new Alexico( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
